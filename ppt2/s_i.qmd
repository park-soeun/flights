---
title: "."
title-slide-attributes:
    data-background-image: "logo.PNG"
    data-background-size: cover
format:
  revealjs:
    theme: simple  # 기본 테마(원하는 테마 변경 가능)
    css: styles.css
    slide-number: true  # 페이지 번호 표시
    footer: "Team 6 | LS BigData School | 2025"  # 푸터 설정
    logo: "logo3.png"  # 로고 삽입
    echo: true
    overflow-y: true
---

## 1. 분석 개요
- 항공편 지연은 항공사, 공항 운영, 승객에게 큰 영향을 미치는 중요한 요소
- 지연을 유발하는 다양한 요인(탑승률, 항공기 모델, 노선 등)에 대한 분석 필요



---

## 2. 사용 데이터

| 데이터셋       | 데이터 출처     | 설명                                       |
|---------------|-----------------|-------------------------------------------|
| `flights.csv`  | 내부 데이터 | 항공편 정보 (출발지, 도착지, 지연 시간 등) |
| `planes.csv`   | 내부 데이터 | 항공기 정보 (제조 연도, 모델 등)           |
| `airlines.csv` | 내부 데이터 | 항공사 코드 및 항공사명 정보               |
| `t100.csv`     | 외부 데이터 | 미국 국내선 항공사의 운항 실적 (항공편 수, 좌석 수, 승객 수, 운항 거리 등) 제공 |

```{python}
#| echo: false
from nycflights13 import flights, planes, airlines
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

plane_df = planes.rename(columns={'year': 'manuf_year'})
df = pd.merge(flights, plane_df, on='tailnum')
pass_df = pd.read_csv('../ppt/data/t100.csv')
```

---

## 3. 공통 데이터 전처리


1. `flights.csv`와 `planes.csv`를 `tailnum` 기준으로 병합
2. `datetime` 컬럼 생성 (`year`, `month`, `day`, `hour`, `minute`를 변환)
3. `airlines.csv`를 `carrier` 기준으로 병합하여 항공사명 추가


```{python}
df = pd.merge(flights, plane_df, on='tailnum')
df['datetime'] = pd.to_datetime(df[['year', 'month', 'day', 'hour', 'minute']])
df = df.merge(airlines, on="carrier", how="left")
```


```{python}
#|echo: false
pass_df.columns = pass_df.columns.str.lower()
print(df.info())
```


---

## 4. 분석

<div id="subject_list">
#### 4.1 탑승률과 항공편 지연 관계 분석
#### 4.2 제조사별 엔진 지연 시간 분석
#### 4.3 제조사별 엔진 지연 시간 원인 도출
</div>

---

### 4.1 탑승률과 항공편 지연 관계 분석

- 항공편 지연은 승객과 항공사 운영에 큰 영향을 미침
- 지연이 발생하는 원인은 여러 가지지만, **탑승률(Load Factor)과의 관계를 분석**
- **탑승률이 높아질수록 실제로 항공편이 더 지연되는지 확인**

---

<div class="section-title">4.1 탑승률과 항공편 지연 관계</div>

#### 추가 데이터 전처리

**BTS T-100 Domestic Segment** : 미국 국내 항공편의 

- 좌석 수
- 승객 수
- 거리 

등의 정보를 제공하는 데이터로, 탑승률 분석에 활용

```{python}
#| code-fold: true
#| echo: false
print(pass_df.info())
```


---


<div class="num">


1️⃣ `t100.csv`(외부 데이터)에서 기존 `flights.csv`에 있는 **출발지(origin), 목적지(dest), 항공사(carrier)**만 필터링

```{python}
#| echo: true
#| code-fold: true
print('외부 데이터의 `origin` 유니크 값')
print(pass_df['origin'].unique())
ori_list = df['origin'].unique()
pass_df = pass_df[pass_df['origin'].isin(ori_list)]

# dest
print('외부 데이터의 `dest` 유니크 값')
print(pass_df['dest'].unique())
dest_list = df['dest'].unique()
pass_df = pass_df[pass_df['dest'].isin(dest_list)]

# carrier
print('외부 데이터의 `carrier` 유니크 값')
print(pass_df['carrier'].unique())
carrier_list = df['carrier'].unique()
pass_df = pass_df[pass_df['carrier'].isin(carrier_list)]
```  

</div>

---


<div class="num">

2️⃣ 탑승률 계산을 위해 연, 월, 항공사, 출발지, 도착지 기준으로 `seats`(좌석 수)와 `passengers`(승객 수)를 합산

</div>

```{python}
pass_grouped = pass_df.groupby(['year', 'month', 'carrier', 'origin', 'dest'])[['seats', 'passengers']].sum().reset_index()

print(pass_df.info())
```


---


<div class="num">


3️⃣ 기존 항공편 데이터(`flights.csv`)와 그룹화 기준을 맞춰 `flight_count`, `avg_dep_delay`, `avg_arr_delay` 계산

</div>


```{python}
flight_grouped = df.groupby(['year', 'month', 'carrier', 'origin', 'dest']).agg(
    flight_count=('flight', 'count'),
    avg_dep_delay=('dep_delay', 'mean'),
    avg_arr_delay=('arr_delay', 'mean'),
    total_distance=('distance', 'sum')
    ).reset_index()

print(flight_grouped.head(5))
```


---


<div class="section-title">4.1 탑승률과 항공편 지연 관계</div>

<div class="num">


4️⃣ 두 데이터를 병합하여 `load_factor = passengers / seats` 계산


</div>

$$
\text{Load Factor} = \frac{\text{Passengers}}{\text{Seats}} \times 100
$$

```{python}
#| code-fold: true
merged_df = flight_grouped.merge(
    pass_grouped,
    on=['year', 'month', 'carrier', 'origin', 'dest'],
)

merged_df['load_factor'] = merged_df['passengers'] / merged_df['seats']

print(merged_df[['passengers', 'seats', 'load_factor']])
```


---

<div class="section-title">4.1 탑승률과 항공편 지연 관계</div>


<div class="num">


5️⃣ 이상치 제거(IQR 방식)


</div>

```{python}
#| echo: true
#| code-fold: true
def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)  # 1사분위수 (Q1)
    Q3 = df[column].quantile(0.75)  # 3사분위수 (Q3)
    IQR = Q3 - Q1  # IQR 계산
    lower_bound = Q1 - 1.5 * IQR  # 이상치 하한
    upper_bound = Q3 + 1.5 * IQR  # 이상치 상한
    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]

cleaned_df = remove_outliers(merged_df, "avg_dep_delay")
```


```{python}
#| echo: false
# 서브플롯 생성 (1행 2열)
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

sns.boxplot(data=merged_df, y="avg_dep_delay", ax=axes[0], color="lightcoral")
axes[0].set_title("Before Outlier Removal")
axes[0].set_ylabel("Average Departure Delay (minutes)")
axes[0].set_xlabel("")
axes[0].grid(True)

sns.boxplot(data=cleaned_df, y="avg_dep_delay", ax=axes[1], color="lightblue")
axes[1].set_title("After Outlier Removal")
axes[1].set_ylabel("")  # 중복되는 y축 라벨 제거
axes[1].set_xlabel("")
axes[1].grid(True)

# 레이아웃 조정
plt.tight_layout()
plt.show()
```


---


<div class="section-title">4.1 탑승률과 항공편 지연 관계</div>

<div class="num">

6️⃣ 탑승률 구간화 및 평균 지연 시간 계산

</div>

<div style="font-size: 23px;">탑승률은 아래와 같이 **5개 구간**으로 나누어 분석하였습니다:</div>

- 0–30%
- 30–50%
- 50–70%
- 70–90%
- 90–100%

```{python}
#| code-fold: true
cleaned_df["load_factor_bin"] = pd.cut(cleaned_df["load_factor"], bins=[0, 0.3, 0.5, 0.7, 0.9, 1], labels=["0-30%", "30-50%", "50-70%", "70-90%", "90-100%"])
summary_stats = cleaned_df.groupby("load_factor_bin")[["avg_dep_delay", "avg_arr_delay"]].mean().reset_index()

print(summary_stats)
```


---


```{python}
#| code-fold: true

plt.figure(figsize=(12, 6))
sns.lineplot(data=summary_stats, x="load_factor_bin", y="avg_dep_delay", marker="o", label="Departure Delay (min)", color="blue")
sns.lineplot(data=summary_stats, x="load_factor_bin", y="avg_arr_delay", marker="s", label="Arrival Delay (min)", color="red")

plt.xlabel("Load Factor Range")
plt.ylabel("Average Delay Time (minutes)")
plt.title("Average Departure/Arrival Delay by Load Factor")
plt.legend()
plt.grid(True)
plt.show()
```


---



```{python}
#| code-fold: true
plt.figure(figsize=(12, 4))
sns.barplot(data=summary_stats, x="load_factor_bin", y="avg_dep_delay", palette="Reds")

plt.xlabel("Load Factor Range")
plt.ylabel("Average Departure Delay (minutes)")
plt.title("Average Departure Delay by Load Factor")
plt.grid(axis="y")
plt.show()
```

- 탑승률이 0~30% 구간에서는 평균 출발 지연 시간이 5.6분으로 가장 낮음
- 탑승률이 30~50% 구간에서는 평균 출발 지연 시간이 8분으로 증가
- 탑승률이 50~70% 구간에서는 평균 출발 지연 시간이 11.6분으로 상승
- 탑승률이 70~90% 구간에서는 평균 출발 지연 시간이 12.7분으로 증가
- 탑승률이 90~100% 구간에서는 평균 출발 지연 시간이 14.2분으로 가장 길어짐


---

<div class="section-title">4.1 탑승률과 항공편 지연 관계</div>

#### 결과


<div class="num">
✅ **탑승률**에 따라서 출발 지연 시간이 꾸준히 **증가**하는 패턴 확인

✅ **만석에 가까울수록** 지연 시간이 긴 이유는 **보딩** 및 **공항 운영상**의 복합적인 요소 때문일 가능성이 큼

✅ 탑승률과 출발 지연 사이에 **상관관계가 존재**하며, 추가적인 공항 운영 요인 분석이 필요함
</div>


---


### 4.2 제조사별 엔진 Delay 시간 분석

- 최근 화두가 되는 비행기 엔진문제
- 그 중 '보잉'사의 엔진 문제가 많은 이야깃거리 
- 항공기 제조사중 가장 지연이 가장 많은 제조사와 그 기종은?

---

#### 제조사들의 결함 문제

![](img\EMB.png){style="position: absolute; width: 80%; height: 90%;"}
![](img\BOE.png){style="position: absolute; bottom: 50px; right: 50px; width: 50%; height: 60%;"}
---

<div class="section-title">4.1 탑승률과 항공편 지연 관계</div>

#### 추가 데이터 전처리

- 도착 지연시간과 출발 지연시간을 더하여 새로운 column 생성
```{python}
df['delay_time'] = df['arr_delay'] + df['dep_delay']
print(df['delay_time'].head())
```

---

- 제조사별 모델을 그룹화하여 delay 평균과 비행 횟수를 구함
```{python}
df_air_time = (
    df.groupby(['manufacturer', 'model'])["delay_time"]
    .agg(['mean', 'count']).sort_values('mean', ascending=False)  
).reset_index()
df_air_time.head()
```

---

- 운항 횟수가 1000회 미만인 데이터를 제거하여 신뢰성 있는 데이터만 유지 (147개 -> 38개)
- 출발 지연시간이 가장 긴 상위 10개 및 가장 짧은 하위 10개 기종 추출
- .nlargest(), nsmallest() 를 사용해서 상,하위 10개의 'mean'열 데이터 추출

```{python}
#| code-fold: true
df_air_time = df_air_time.drop(df_air_time[df_air_time['count']<1000].index)
df_air_time.shape   # 기존 147개 데이터에서 38개의 데이터로 축소

delay_time_top = df_air_time.nlargest(10, 'mean')
delay_time_bottom = df_air_time.nsmallest(10, 'mean')
```

::: {.column width="50%"}

상위 10개 추출
```{python}
#| echo: false
print(delay_time_top[['model','mean','count']])

```

:::

:::{.column width="50%"}

하위 10개 추출
```{python}
#| echo: false
print(delay_time_bottom[['model','mean','count']])
```

:::

---

- 그래프에서 제조사와 모델을 직관적으로 표시하기 위해 새로운 열 manu_model 생성
- 제조사 이름의 앞 3글자 + 두 번째 단어의 첫 글자 + 모델명을 조합하여 가독성을 높임

```{python}
#|code-fold: true
delay_time_top['manu_model'] = ( delay_time_top['manufacturer'].str[:3] +  delay_time_top['manufacturer'].str.split().str[1].str[0].fillna(''))+ "/" + delay_time_top['model']

delay_time_bottom['manu_model'] = ( delay_time_bottom['manufacturer'].str[:3] +  delay_time_bottom['manufacturer'].str.split().str[1].str[0].fillna(''))+ "/" + delay_time_bottom['model']


```



```{python}
#| echo: false
print(delay_time_top[['manufacturer','model','manu_model']])
```



---

#### 분석 및 시각화 


```{python}
#| code-fold: true
plt.figure(figsize=(14,5))
sns.barplot(x=delay_time_top['manu_model'],y=delay_time_top['mean'], palette="Reds_r")
plt.ylim(0, 50)
plt.xlabel("model by manufacturer",fontsize=20)
plt.ylabel("delay time_mean",fontsize=20)
plt.title("Bad flights",fontsize=20)
plt.xticks(rotation=40,fontsize=16, fontweight='bold');
```


---

#### 분석 및 시각화 


```{python}
#| code-fold: true
plt.figure(figsize=(14,5))
sns.barplot(x=delay_time_bottom['manu_model'],y=delay_time_bottom['mean'], palette="Blues_r")
plt.ylim(-5, 50)
plt.xlabel("model by manufacturer",fontsize=20)
plt.ylabel("delay time_mean",fontsize=20)
plt.title("Good flights",fontsize=20)
plt.xticks(rotation=40,fontsize=16, fontweight='bold');

```

---

#### 결론

- 가장 신뢰성이 떨어지는 기종 Top3는 '**EMB**'사의 '**EMB-145LR**'기종, '**BOE**'사의 '**717-200**'기종 , '**CAN**'사의 '**CL-600-2B19**'기종이다
- 또한 제조사만 봤을때 '**BOMI**'사 **4대**, '**EMB**'사 **2대** , '**BOE**'사 **2대**가 나타나여 이 제조사들의 model이 지연이 잘되는 걸 알 수 있다.
- EMB는 엠브라에르, BOE는 보잉, CAN은 케나다에어


<br>


- 반대로 신뢰성이 높은 기종 Top3는 '**BOE**'사의 '**757-231**'기종, '**BOE**'사의 '**757-2Q8**' 기종, '**AIR**'사의 '**A321-211**'기종 이다.
- 또한 제조사만 봤을때 '**BOE**'사 **5대**, '**AIRBUS**'사 **2대**, '**AIR Industry**'사 **2대**로 신뢰성 높은  model을 만들어 내는것을 알 수 있다.

---

### 피해야 할 비행기


<div class="plane_images">

<div class="plane_image">
<h3 style="font-size: 30px;">ERJ 145</h3>
![](img\erj145_kp.jpg)
</div>


<div class="plane_image">
<h3 style="font-size: 30px;">BOE 717</h3>
![](img\boe717.jpg)
</div>


<div class="plane_image">
<h3 style="font-size: 30px;">CL-600-2B19</h3>
![](img\CL-600-2B19.jpg)
</div>

</div>

---

#### 4.3 제조사별 엔진 지연 시간 원인 도출

- 앞선 결과에서 더 자세한 원인을 분석하고자함
- 예상 원인: 제조 연식,비행기 모델,엔진 수,항공사,공항,시트 수

:::{.column width="50%"}

추가 전처리

:::


```{python}
#| code-fold: true
delay_time_top["flight_type"] = "bad flight"
delay_time_bottom["flight_type"] = "good flight"
concat_data = pd.concat([delay_time_top, delay_time_bottom], axis=0)
df = pd.merge(concat_data,df, on=['manufacturer','model'])

delay_time_bottom.head(2)
concat_data.columns
df.info()
```

---

### 전처리 이후 데이터 셋

```{python}
#| code-fold: true
count_avg = df.groupby(['model','seats','manufacturer','manu_model','flight_type','manuf_year']).agg({'delay_time': 'mean'}).reset_index()
count_avg.head(2)
```


---

### 제조년식으로 산점도를 찍었을때

- 2000년도 기점으로 bad flight이 많아짐 

<span style="color:red;">무엇이 원인일까?</span>

```{python}
#| code-fold: true
sns.scatterplot(data=count_avg, x='manuf_year', y='delay_time', hue='flight_type', palette='viridis', s=300)
plt.legend(title='flight_type', bbox_to_anchor=(1.05, 0.5), loc='center left')

# 그래프 제목과 레이블
plt.title('Scatterplot: year vs Delay')
plt.xlabel('Year')
plt.ylabel('Average Delay')

# 그래프 출력
plt.show()

```


---

### 제조사로 산점도를 찍었을때


- 색깔은 제조사, 모양은 비행기 레이블
- 좋은 제조사: MACDONNELL DOUGLAS, AIRBUS INDUSTRIE
- 나쁜 제조사 BOMBARDIER INC,EMBRAER
- <span style="color:red;">but 명확하게 나눠지는 기준이 X</span>


```{python}
#| code-fold: true

sns.scatterplot(data=count_avg, x='manuf_year', y='delay_time', hue='manufacturer', style='flight_type', palette='tab10',s=300)

plt.legend(title='Manufacturer', bbox_to_anchor=(1.05, 0.5),loc='center left')
# 그래프 제목과 레이블
plt.title('Scatterplot: year vs Average Delay')
plt.xlabel('Year')
plt.ylabel('Average Delay')
plt.show()
```

---

### 시트갯수로 산점도를 찍었을때

- 어느정도 영향은 있다.
- 시트가 많을수록, 딜레이가 짧다.
- 시트가 적을수록, 딜레이가 길다.
- <span style="color:red;">but 명확하게 나눠지는 기준이 X</span>

```{python}
#| code-fold: true
sns.scatterplot(data=count_avg, x='manuf_year', y='delay_time', hue='seats', style='flight_type', palette='tab20',s=300)

plt.legend(title='Manufacturer', bbox_to_anchor=(1.05, 0.5),loc='center left')
# 그래프 제목과 레이블
plt.title('Scatterplot: year vs Average Delay')
plt.xlabel('Year')
plt.ylabel('Average Delay')
plt.show()
```



---

### 모델별로 산점도를 찍었을때

- 18개의 모델별로 명확히 나누어진다.
- 앞서 언급한 좋은 제조사 곳은 AIRBUS INDUSTRIE 모델을 2가지 사용

```{python}
#| code-fold: true
palette = sns.color_palette("tab20", n_colors=18)
sns.scatterplot(data=count_avg, x='manuf_year', y='delay_time', hue='model',style='flight_type',  palette= palette,s=300)
# 그래프 제목과 레이블
plt.legend(title='label', bbox_to_anchor=(1.05, 0.5), loc='center left')
plt.title('Scatterplot: year vs Average Delay')
plt.xlabel('Year')
plt.ylabel('Average Delay')

plt.show()
```

---

### 결론
- 제조사의 영향보다는 모델의 영향으로 딜레이 시간 결정됨.


<span style="color:red;">앞선 결과와 일치</span>

